services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

  # Elasticsearch Search Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: es_search
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - app_network

  app:
    build: .                  
    container_name: node_server
    environment:
      CHOKIDAR_USEPOLLING: "true"
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres   
      POSTGRES_PORT: 5432
    depends_on:
      - postgres            
    ports:
      - "3000:3000"
    volumes:
      - ./src:/usr/src/app/src                  # Bind mount src for real-time code updates
      - ./.env:/usr/src/app/.env                # Mount .env file
      - ./tsconfig.json:/usr/src/app/tsconfig.json  # Mount tsconfig.json for TypeScript settings
      - /usr/src/app/node_modules               # Keep node_modules isolated in container
    networks:
      - app_network

volumes:
  postgres_data:
  redis_data:
  es_data:

networks:
  app_network:
